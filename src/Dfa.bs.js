// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Hashtbl from "../node_modules/bs-platform/lib/es6/hashtbl.js";
import * as StateSet$ReasonReNfa from "./StateSet.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as CharMapStateSet$ReasonReNfa from "./CharMapStateSet.bs.js";
import * as StateMapCharMapStateSet$ReasonReNfa from "./StateMapCharMapStateSet.bs.js";

function fold_states(f, dfa, init) {
  var v = /* record */[/* contents */init];
  var seen = Hashtbl.create(undefined, 10);
  var visit = function (state) {
    if (Hashtbl.mem(seen, state)) {
      return 0;
    } else {
      v[0] = Curry._2(f, state, v[0]);
      Hashtbl.add(seen, state, /* () */0);
      return Curry._2(CharMapStateSet$ReasonReNfa.iter, (function (param) {
                    return visit;
                  }), Curry._1(dfa[/* next */2], state));
    }
  };
  visit(dfa[/* start */0]);
  return v[0];
}

function fold_transitions(f, dfa, init) {
  return fold_states((function (src, v) {
                return Curry._3(CharMapStateSet$ReasonReNfa.fold, (function (c, dst) {
                              return Curry._1(f, /* tuple */[
                                          src,
                                          c,
                                          dst
                                        ]);
                            }), Curry._1(dfa[/* next */2], src), v);
              }), dfa, init);
}

function add_transition(param, trans) {
  var dst = param[2];
  var c = param[1];
  var src = param[0];
  var exit = 0;
  var cm;
  try {
    cm = Curry._2(StateMapCharMapStateSet$ReasonReNfa.find, src, trans);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return Curry._3(StateMapCharMapStateSet$ReasonReNfa.add, src, Curry._2(CharMapStateSet$ReasonReNfa.singleton, c, dst), trans);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return Curry._3(StateMapCharMapStateSet$ReasonReNfa.add, src, Curry._3(CharMapStateSet$ReasonReNfa.add, c, dst, cm), trans);
  }
  
}

function add_transition$prime(param, trans) {
  var dst = param[2];
  var c = param[1];
  var src = param[0];
  var exit = 0;
  var cm;
  try {
    cm = Curry._2(StateMapCharMapStateSet$ReasonReNfa.find, src, trans);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return Curry._3(StateMapCharMapStateSet$ReasonReNfa.add, src, Curry._2(CharMapStateSet$ReasonReNfa.singleton, c, Curry._1(StateSet$ReasonReNfa.singleton, dst)), trans);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var dstset;
    var exit$1 = 0;
    var dstset$1;
    try {
      dstset$1 = Curry._2(CharMapStateSet$ReasonReNfa.find, c, cm);
      exit$1 = 2;
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        dstset = Curry._1(StateSet$ReasonReNfa.singleton, dst);
      } else {
        throw exn$1;
      }
    }
    if (exit$1 === 2) {
      dstset = Curry._2(StateSet$ReasonReNfa.add, dst, dstset$1);
    }
    return Curry._3(StateMapCharMapStateSet$ReasonReNfa.add, src, Curry._3(CharMapStateSet$ReasonReNfa.add, c, dstset, cm), trans);
  }
  
}

function accept(dfa, inp) {
  var _cur = dfa[/* start */0];
  var _param = inp;
  while(true) {
    var param = _param;
    var cur = _cur;
    if (param) {
      var exit = 0;
      var s;
      try {
        s = Curry._2(CharMapStateSet$ReasonReNfa.find, param[0], Curry._1(dfa[/* next */2], cur));
        exit = 1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return false;
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        _param = param[1];
        _cur = s;
        continue ;
      }
      
    } else {
      return Curry._2(StateSet$ReasonReNfa.mem, cur, dfa[/* finals */1]);
    }
  };
}

export {
  fold_states ,
  fold_transitions ,
  add_transition ,
  add_transition$prime ,
  accept ,
  
}
/* StateSet-ReasonReNfa Not a pure module */
