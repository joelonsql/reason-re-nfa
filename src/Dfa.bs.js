// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as Char from "../node_modules/bs-platform/lib/es6/char.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Int32 from "../node_modules/bs-platform/lib/es6/int32.js";
import * as Random from "../node_modules/bs-platform/lib/es6/random.js";
import * as $$String from "../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_array from "../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Common$ReasonReNfa from "./Common.bs.js";
import * as CharMap$ReasonReNfa from "./CharMap.bs.js";
import * as CharSet$ReasonReNfa from "./CharSet.bs.js";
import * as StateMap$ReasonReNfa from "./StateMap.bs.js";
import * as StateSet$ReasonReNfa from "./StateSet.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

function singleton(start) {
  return /* record */[
          /* states */Curry._1(StateSet$ReasonReNfa.singleton, start),
          /* alphabet */CharSet$ReasonReNfa.empty,
          /* transitions */StateMap$ReasonReNfa.empty,
          /* start */start,
          /* finals */StateSet$ReasonReNfa.empty,
          /* src_dsts */StateMap$ReasonReNfa.empty
        ];
}

function set_finals(finals, dfa) {
  return /* record */[
          /* states */dfa[/* states */0],
          /* alphabet */dfa[/* alphabet */1],
          /* transitions */dfa[/* transitions */2],
          /* start */dfa[/* start */3],
          /* finals */Curry._1(StateSet$ReasonReNfa.of_list, List.map((function (s) {
                      return Curry._2(StateSet$ReasonReNfa.find, s, dfa[/* states */0]);
                    }), Curry._1(StateSet$ReasonReNfa.elements, finals))),
          /* src_dsts */dfa[/* src_dsts */5]
        ];
}

function add_transition(param, dfa) {
  var dst = param[2];
  var $$char = param[1];
  var src = param[0];
  var tmp;
  var exit = 0;
  var char_map;
  try {
    char_map = Curry._2(StateMap$ReasonReNfa.find, src, dfa[/* transitions */2]);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      tmp = Curry._2(CharMap$ReasonReNfa.singleton, $$char, dst);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    tmp = Curry._3(CharMap$ReasonReNfa.add, $$char, dst, char_map);
  }
  var tmp$1;
  var exit$1 = 0;
  var dsts;
  try {
    dsts = Curry._2(StateMap$ReasonReNfa.find, src, dfa[/* src_dsts */5]);
    exit$1 = 1;
  }
  catch (exn$1){
    if (exn$1 === Caml_builtin_exceptions.not_found) {
      tmp$1 = Curry._1(StateSet$ReasonReNfa.singleton, dst);
    } else {
      throw exn$1;
    }
  }
  if (exit$1 === 1) {
    tmp$1 = Curry._2(StateSet$ReasonReNfa.add, dst, dsts);
  }
  return /* record */[
          /* states */Curry._2(StateSet$ReasonReNfa.add, dst, Curry._2(StateSet$ReasonReNfa.add, src, dfa[/* states */0])),
          /* alphabet */Curry._2(CharSet$ReasonReNfa.add, $$char, dfa[/* alphabet */1]),
          /* transitions */Curry._3(StateMap$ReasonReNfa.add, src, tmp, dfa[/* transitions */2]),
          /* start */dfa[/* start */3],
          /* finals */dfa[/* finals */4],
          /* src_dsts */Curry._3(StateMap$ReasonReNfa.add, src, tmp$1, dfa[/* src_dsts */5])
        ];
}

function to_dot(dfa) {
  return "digraph {\nrankdir = LR;\nnode [shape = none; width = 0;] \"\";\n" + ($$String.concat("\n", List.map((function (state) {
                      var shape = Curry._2(StateSet$ReasonReNfa.mem, state, dfa[/* finals */4]) ? "doublecircle" : "circle";
                      return "node [shape = " + (shape + ("] " + (Int32.to_string(state) + ";")));
                    }), Curry._1(StateSet$ReasonReNfa.elements, dfa[/* states */0]))) + ("\n\"\" -> " + (Int32.to_string(dfa[/* start */3]) + (";\n" + ($$String.concat("\n", List.map((function (param) {
                              var src = param[0];
                              return $$String.concat("\n", List.map((function (param) {
                                                return Int32.to_string(src) + ("->" + (Int32.to_string(param[1]) + (" [label=\"" + ($$String.make(1, param[0]) + "\"];"))));
                                              }), Curry._1(CharMap$ReasonReNfa.bindings, param[1])));
                            }), Curry._1(StateMap$ReasonReNfa.bindings, dfa[/* transitions */2]))) + "\n}\n")))));
}

function to_c(dfa) {
  var match = Curry._2(StateSet$ReasonReNfa.mem, dfa[/* start */3], dfa[/* finals */4]);
  return "bool match_dfa(char *s) {\n  bool match = " + ((
            match ? "true" : "false"
          ) + (";\n" + ($$String.concat("\n", List.map((function (src) {
                          var tmp;
                          var exit = 0;
                          var char_map;
                          try {
                            char_map = Curry._2(StateMap$ReasonReNfa.find, src, dfa[/* transitions */2]);
                            exit = 1;
                          }
                          catch (exn){
                            if (exn === Caml_builtin_exceptions.not_found) {
                              tmp = /* [] */0;
                            } else {
                              throw exn;
                            }
                          }
                          if (exit === 1) {
                            tmp = Curry._1(CharMap$ReasonReNfa.bindings, char_map);
                          }
                          return "  state" + (Int32.to_string(src) + (":\n  switch (*s) {\n" + ($$String.concat("", List.map((function (param) {
                                                  var dst = param[1];
                                                  var match = Curry._2(StateSet$ReasonReNfa.mem, dst, dfa[/* finals */4]);
                                                  return "    case '" + ($$String.make(1, param[0]) + ("': s++; match = " + ((
                                                                match ? "true" : "false"
                                                              ) + ("; goto state" + (Int32.to_string(dst) + ";\n")))));
                                                }), tmp)) + "    case 0: goto done;\n    default: match = false; goto done;\n  }")));
                        }), Curry._1(StateSet$ReasonReNfa.elements, dfa[/* states */0]))) + "\n  done:\n  return match;\n}\n\nint main(int argc, char **argv) {\n  char *s = argv[1];\n  bool match = match_dfa(s);\n  return (int)match;\n}")));
}

function to_llvm_ir(dfa) {
  var match = Curry._2(StateSet$ReasonReNfa.mem, dfa[/* start */3], dfa[/* finals */4]);
  return "define zeroext i1 @match_dfa(i8*) {\n  %s = alloca i8*, align 8\n  %match = alloca i8, align 1\n  store i8* %0, i8** %s, align 8\n  store i8 " + ((
            match ? "1" : "0"
          ) + (", i8* %match, align 1\n  br label %state" + (Int32.to_string(dfa[/* start */3]) + ("\n\n" + ($$String.concat("\n", List.map((function (src) {
                              var s = Int32.to_string(src);
                              var tmp;
                              var exit = 0;
                              var char_map;
                              try {
                                char_map = Curry._2(StateMap$ReasonReNfa.find, src, dfa[/* transitions */2]);
                                exit = 1;
                              }
                              catch (exn){
                                if (exn === Caml_builtin_exceptions.not_found) {
                                  tmp = /* [] */0;
                                } else {
                                  throw exn;
                                }
                              }
                              if (exit === 1) {
                                tmp = Curry._1(CharMap$ReasonReNfa.bindings, char_map);
                              }
                              return "state" + (s + (":\n  %state" + (s + (".s_ptr = load i8*, i8** %s, align 8\n  %state" + (s + (".chr = load i8, i8* %state" + (s + (".s_ptr, align 1\n  %state" + (s + (".chr_int = sext i8 %state" + (s + (".chr to i32\n  %state" + (s + (".s_next_ptr = getelementptr inbounds i8, i8* %state" + (s + (".s_ptr, i32 1\n  switch i32 %state" + (s + (".chr_int, label %miss [\n" + ($$String.concat("", List.map((function (param) {
                                                                                      var $$char = param[0];
                                                                                      return "    i32 " + (String($$char) + (", label %state" + (s + (".goto.state" + (Int32.to_string(param[1]) + (" ; " + ($$String.make(1, $$char) + "\n")))))));
                                                                                    }), tmp)) + "    i32 0, label %done\n  ]\n")))))))))))))))))));
                            }), Curry._1(StateSet$ReasonReNfa.elements, dfa[/* states */0]))) + ("\n" + ($$String.concat("\n", List.map((function (param) {
                                  var src = param[0];
                                  var s = Int32.to_string(src);
                                  return $$String.concat("\n", List.map((function (dst) {
                                                    var d = Int32.to_string(dst);
                                                    var match = Curry._2(StateSet$ReasonReNfa.mem, src, dfa[/* finals */4]);
                                                    return "state" + (s + (".goto.state" + (d + (":\n  store i8* %state" + (s + (".s_next_ptr, i8** %s, align 8\n  store i8 " + ((
                                                                          match ? "1" : "0"
                                                                        ) + (", i8* %match, align 1\n  br label %state" + (d + "\n")))))))));
                                                  }), Curry._1(StateSet$ReasonReNfa.elements, param[1])));
                                }), Curry._1(StateMap$ReasonReNfa.bindings, dfa[/* src_dsts */5]))) + "\nmiss:\n  store i8 0, i8* %match, align 1\n  br label %done\n\ndone:\n  %match_val = load i8, i8* %match, align 1\n  %ret = trunc i8 %match_val to i1\n  ret i1 %ret\n}\n\ndefine i32 @main(i32, i8**) {\n  %argv = getelementptr inbounds i8*, i8** %1, i64 1\n  %s = load i8*, i8** %argv, align 8\n  %match = tail call zeroext i1 @match_dfa(i8* %s)\n  %ret = zext i1 %match to i32\n  ret i32 %ret\n}\n")))))));
}

function to_matrix(dfa) {
  var states = $$Array.of_list(Curry._1(StateSet$ReasonReNfa.elements, dfa[/* states */0]));
  var dimx = states.length;
  var alphabet = $$Array.of_list(Curry._1(CharSet$ReasonReNfa.elements, dfa[/* alphabet */1]));
  var dimy = alphabet.length;
  var matrix = $$Array.make_matrix(dimx + 1 | 0, dimy + 1 | 0, "");
  for(var x = 1; x <= dimx; ++x){
    var src = Caml_array.caml_array_get(states, x - 1 | 0);
    Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, x), 0, Int32.to_string(src));
    for(var y = 1; y <= dimy; ++y){
      var $$char = Caml_array.caml_array_get(alphabet, y - 1 | 0);
      if (x === 1) {
        Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, 0), y, $$String.make(1, $$char));
      }
      var tmp;
      var exit = 0;
      var dst;
      try {
        dst = Curry._2(CharMap$ReasonReNfa.find, $$char, Curry._2(StateMap$ReasonReNfa.find, src, dfa[/* transitions */2]));
        exit = 1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          tmp = "";
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        tmp = Int32.to_string(dst);
      }
      Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, x), y, tmp);
    }
  }
  return matrix;
}

function accept(dfa, input) {
  var _cur_state = dfa[/* start */3];
  var _param = Common$ReasonReNfa.explode(input);
  while(true) {
    var param = _param;
    var cur_state = _cur_state;
    if (param) {
      var exit = 0;
      var next_state;
      try {
        next_state = Curry._2(CharMap$ReasonReNfa.find, param[0], Curry._2(StateMap$ReasonReNfa.find, cur_state, dfa[/* transitions */2]));
        exit = 1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return false;
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        _param = param[1];
        _cur_state = next_state;
        continue ;
      }
      
    } else {
      return Curry._2(StateSet$ReasonReNfa.mem, cur_state, dfa[/* finals */4]);
    }
  };
}

function dump(dfa) {
  console.log("Dfa.states: " + StateSet$ReasonReNfa.to_string(dfa[/* states */0]));
  console.log("Dfa.alphabet: " + CharSet$ReasonReNfa.to_string(dfa[/* alphabet */1]));
  console.log("Dfa.transitions:");
  console.log(to_matrix(dfa));
  console.log("Dfa.start: " + Int32.to_string(dfa[/* start */3]));
  console.log("Dfa.finals: " + StateSet$ReasonReNfa.to_string(dfa[/* finals */4]));
  return /* () */0;
}

function test(param) {
  var dfa = set_finals(Curry._1(StateSet$ReasonReNfa.singleton, 0), add_transition(/* tuple */[
            1,
            /* "y" */121,
            0
          ], add_transition(/* tuple */[
                1,
                /* "x" */120,
                0
              ], add_transition(/* tuple */[
                    0,
                    /* "c" */99,
                    1
                  ], add_transition(/* tuple */[
                        0,
                        /* "b" */98,
                        1
                      ], add_transition(/* tuple */[
                            0,
                            /* "a" */97,
                            1
                          ], singleton(0)))))));
  console.log(to_llvm_ir(dfa));
  return /* () */0;
}

function randomize(param) {
  var build = function (_dfa, _src, _n) {
    while(true) {
      var n = _n;
      var src = _src;
      var dfa = _dfa;
      if (n !== 10) {
        var dst = Random.$$int(10);
        var chr = Char.chr(65 + Random.$$int(26) | 0);
        _n = n + 1 | 0;
        _src = dst;
        _dfa = add_transition(/* tuple */[
              src,
              chr,
              dst
            ], dfa);
        continue ;
      } else {
        return dfa;
      }
    };
  };
  var dfa = build(singleton(0), 0, 0);
  var states = $$Array.of_list(Curry._1(StateSet$ReasonReNfa.elements, dfa[/* states */0]));
  var dfa$1 = set_finals(Curry._1(StateSet$ReasonReNfa.of_list, /* :: */[
            Caml_array.caml_array_get(states, Random.$$int(states.length)),
            /* :: */[
              Caml_array.caml_array_get(states, Random.$$int(states.length)),
              /* :: */[
                Caml_array.caml_array_get(states, Random.$$int(states.length)),
                /* :: */[
                  Caml_array.caml_array_get(states, Random.$$int(states.length)),
                  /* :: */[
                    Caml_array.caml_array_get(states, Random.$$int(states.length)),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]), dfa);
  console.log(to_llvm_ir(dfa$1));
  return /* () */0;
}

export {
  singleton ,
  set_finals ,
  add_transition ,
  to_dot ,
  to_c ,
  to_llvm_ir ,
  to_matrix ,
  accept ,
  dump ,
  test ,
  randomize ,
  
}
/* CharMap-ReasonReNfa Not a pure module */
