// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE

import * as $$Set from "../node_modules/bs-platform/lib/es6/set.js";
import * as Char from "../node_modules/bs-platform/lib/es6/char.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Format from "../node_modules/bs-platform/lib/es6/format.js";
import * as $$String from "../node_modules/bs-platform/lib/es6/string.js";
import * as Hashtbl from "../node_modules/bs-platform/lib/es6/hashtbl.js";
import * as Pervasives from "../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Nfa$ReasonReNfa from "./Nfa.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

function format_attrs(formatter, attrs) {
  if (attrs) {
    Format.fprintf(formatter, /* Format */[
          /* Char_literal */Block.__(12, [
              /* "[" */91,
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@ ",
                      1,
                      0
                    ]),
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* End_of_format */0,
                            ""
                          ]]),
                      /* End_of_format */0
                    ])
                ])
            ]),
          "[@ @["
        ]);
    List.iter((function (param) {
            return Curry._2(Format.fprintf(formatter, /* Format */[
                            /* Caml_string */Block.__(3, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* "=" */61,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Caml_string */Block.__(3, [
                                                /* No_padding */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* ";" */59,
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "%S@ =@ %S;"
                          ]), param[0], param[1]);
          }), attrs);
    return Format.fprintf(formatter, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "]" */93,
                    /* Formatting_lit */Block.__(17, [
                        /* Close_box */0,
                        /* End_of_format */0
                      ])
                  ]),
                "]@]"
              ]);
  } else {
    return /* () */0;
  }
}

function make(id) {
  return /* tuple */[
          id,
          /* [] */0
        ];
}

function with_attrs(param, attrs$prime) {
  return /* tuple */[
          param[0],
          Pervasives.$at(param[1], attrs$prime)
        ];
}

function format(formatter, param) {
  return Curry._3(Format.fprintf(formatter, /* Format */[
                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@ ",
                              1,
                              0
                            ]),
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ])]),
                  "%a@ %S"
                ]), format_attrs, param[1], param[0]);
}

function id(param) {
  return param[0];
}

var empty = /* tuple */[
  undefined,
  /* [] */0
];

function with_attrs$1(param, attrs) {
  return /* tuple */[
          param[0],
          Pervasives.$at(param[1], List.map((function (param) {
                      return /* Attr */Block.__(2, [
                                param[0],
                                param[1]
                              ]);
                    }), attrs))
        ];
}

function with_node(param, node) {
  return /* tuple */[
          param[0],
          Pervasives.$at(param[1], /* :: */[
                /* Node */Block.__(0, [node]),
                /* [] */0
              ])
        ];
}

function with_edge(param, attrs, param$1) {
  var n2 = param$1[1];
  var n1 = param$1[0];
  var stmts = param[1];
  var id = param[0];
  if (attrs !== undefined) {
    return /* tuple */[
            id,
            Pervasives.$at(stmts, /* :: */[
                  /* Edge */Block.__(1, [
                      n1,
                      n2,
                      attrs
                    ]),
                  /* [] */0
                ])
          ];
  } else {
    return /* tuple */[
            id,
            Pervasives.$at(stmts, /* :: */[
                  /* Edge */Block.__(1, [
                      n1,
                      n2,
                      /* [] */0
                    ]),
                  /* [] */0
                ])
          ];
  }
}

function format_stmt(formatter, param) {
  switch (param.tag | 0) {
    case 0 : 
        return Curry._2(Format.fprintf(formatter, /* Format */[
                        /* String_literal */Block.__(11, [
                            "node",
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@ ",
                                    1,
                                    0
                                  ]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* End_of_format */0,
                                          ""
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "node@ @[%a@]"
                      ]), format, param[0]);
    case 1 : 
        return Curry._4(Format.fprintf(formatter, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* End_of_format */0,
                                      ""
                                    ]]),
                                /* Caml_string */Block.__(3, [
                                    /* No_padding */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* String_literal */Block.__(11, [
                                            "->",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* Caml_string */Block.__(3, [
                                                    /* No_padding */0,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@ ",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[@[%S@ ->@ %S@]@ %a@]"
                      ]), id(param[0]), id(param[1]), format_attrs, param[2]);
    case 2 : 
        return Curry._2(Format.fprintf(formatter, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Caml_string */Block.__(3, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* "=" */61,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Caml_string */Block.__(3, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* Char_literal */Block.__(12, [
                                                        /* ";" */59,
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[%S@ =@ %S@];"
                      ]), param[0], param[1]);
    
  }
}

function format$1(formatter, param) {
  var id = param[0];
  if (id !== undefined) {
    Curry._1(Format.fprintf(formatter, /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Close_box */0,
                  /* String_literal */Block.__(11, [
                      "digraph ",
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* Char_literal */Block.__(12, [
                              /* "{" */123,
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* End_of_format */0,
                                        ""
                                      ]]),
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "@]digraph %S{@["
            ]), id);
  } else {
    Format.fprintf(formatter, /* Format */[
          /* Formatting_gen */Block.__(18, [
              /* Open_box */Block.__(1, [/* Format */[
                    /* End_of_format */0,
                    ""
                  ]]),
              /* String_literal */Block.__(11, [
                  "digraph {",
                  /* Formatting_lit */Block.__(17, [
                      /* Force_newline */3,
                      /* End_of_format */0
                    ])
                ])
            ]),
          "@[digraph {@\n"
        ]);
  }
  List.iter(Curry._1(Format.fprintf(formatter, /* Format */[
                /* Formatting_lit */Block.__(17, [
                    /* Break */Block.__(0, [
                        "@ ",
                        1,
                        0
                      ]),
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@ ",
                            1,
                            0
                          ]),
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Close_box */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Force_newline */3,
                                        /* End_of_format */0
                                      ])
                                  ])])
                          ])
                      ])
                  ]),
                "@ @ @[%a@]@\n"
              ]), format_stmt), param[1]);
  return Format.fprintf(formatter, /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "}" */125,
                  /* Formatting_lit */Block.__(17, [
                      /* Close_box */0,
                      /* End_of_format */0
                    ])
                ]),
              "}@]"
            ]);
}

var Digraph_000 = /* Node */[
  make,
  with_attrs
];

var CharSet = $$Set.Make([Char.compare]);

function edge_name(s) {
  var match = Curry._1(CharSet[/* cardinal */18], s);
  if (match === 0 || match === 1) {
    if (match !== 0) {
      return $$String.make(1, Curry._1(CharSet[/* choose */22], s));
    } else {
      return "{}";
    }
  } else if (match !== 256) {
    return "{" + ($$String.concat(" ", List.map((function (param) {
                        return $$String.make(1, param);
                      }), Curry._1(CharSet[/* elements */19], s))) + "}");
  } else {
    return ".";
  }
}

function digraph_of_nfa(nfa) {
  var states = Hashtbl.create(undefined, 10);
  var edges = Hashtbl.create(undefined, 10);
  var counter = /* record */[/* contents */0];
  var make_node = function (n) {
    var name = String(counter[0]);
    counter[0] = counter[0] + 1 | 0;
    var node = Curry._1(Digraph_000[/* make */0], name);
    var shape = Curry._2(Nfa$ReasonReNfa.StateSet[/* mem */2], n, nfa[/* finals */1]) ? "doublecircle" : "circle";
    return Curry._2(Digraph_000[/* with_attrs */1], node, /* :: */[
                /* tuple */[
                  "shape",
                  shape
                ],
                /* [] */0
              ]);
  };
  var add_edge = function (source, c, target) {
    var tmp;
    var exit = 0;
    var set;
    try {
      set = Hashtbl.find(edges, /* tuple */[
            source,
            target
          ]);
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        tmp = Curry._1(CharSet[/* singleton */4], c);
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      tmp = Curry._2(CharSet[/* add */3], c, set);
    }
    return Hashtbl.replace(edges, /* tuple */[
                source,
                target
              ], tmp);
  };
  var step = function (state) {
    if (Hashtbl.mem(states, state)) {
      return 0;
    } else {
      Hashtbl.add(states, state, make_node(state));
      return Curry._2(Nfa$ReasonReNfa.CharMap[/* iter */9], (function (c, targets) {
                    return Curry._2(Nfa$ReasonReNfa.StateSet[/* iter */12], (function (target) {
                                  add_edge(state, c, target);
                                  return step(target);
                                }), targets);
                  }), Curry._1(nfa[/* next */2], state));
    }
  };
  step(nfa[/* start */0]);
  var input = Curry._2(Digraph_000[/* with_attrs */1], Curry._1(Digraph_000[/* make */0], ""), /* :: */[
        /* tuple */[
          "shape",
          "none"
        ],
        /* :: */[
          /* tuple */[
            "width",
            "0"
          ],
          /* [] */0
        ]
      ]);
  var dg = with_node(with_attrs$1(empty, /* :: */[
            /* tuple */[
              "rankdir",
              "LR"
            ],
            /* [] */0
          ]), input);
  var dg$1 = Hashtbl.fold((function (param, node, dg) {
          return with_node(dg, node);
        }), states, dg);
  var dg$2 = with_edge(dg$1, undefined, /* tuple */[
        input,
        Hashtbl.find(states, nfa[/* start */0])
      ]);
  return Hashtbl.fold((function (param, s, dg) {
                return with_edge(dg, /* :: */[
                            /* tuple */[
                              "label",
                              edge_name(s)
                            ],
                            /* [] */0
                          ], /* tuple */[
                            Hashtbl.find(states, param[0]),
                            Hashtbl.find(states, param[1])
                          ]);
              }), edges, dg$2);
}

var format_digraph = format$1;

export {
  format_digraph ,
  digraph_of_nfa ,
  
}
/* CharSet Not a pure module */
