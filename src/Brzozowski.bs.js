// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Dfa$ReasonReNfa from "./Dfa.bs.js";
import * as StateSet$ReasonReNfa from "./StateSet.bs.js";
import * as RabinScott$ReasonReNfa from "./RabinScott.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as CharMapStateSet$ReasonReNfa from "./CharMapStateSet.bs.js";
import * as StateMapCharMapStateSet$ReasonReNfa from "./StateMapCharMapStateSet.bs.js";

function add_transition$prime(param, trans) {
  var dst = param[2];
  var c = param[1];
  var src = param[0];
  var exit = 0;
  var cm;
  try {
    cm = Curry._2(StateMapCharMapStateSet$ReasonReNfa.find, src, trans);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return Curry._3(StateMapCharMapStateSet$ReasonReNfa.add, src, Curry._2(CharMapStateSet$ReasonReNfa.singleton, c, Curry._1(StateSet$ReasonReNfa.singleton, dst)), trans);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var dstset;
    var exit$1 = 0;
    var dstset$1;
    try {
      dstset$1 = Curry._2(CharMapStateSet$ReasonReNfa.find, c, cm);
      exit$1 = 2;
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        dstset = Curry._1(StateSet$ReasonReNfa.singleton, dst);
      } else {
        throw exn$1;
      }
    }
    if (exit$1 === 2) {
      dstset = Curry._2(StateSet$ReasonReNfa.add, dst, dstset$1);
    }
    return Curry._3(StateMapCharMapStateSet$ReasonReNfa.add, src, Curry._3(CharMapStateSet$ReasonReNfa.add, c, dstset, cm), trans);
  }
  
}

function reverse(dfa) {
  var map = Dfa$ReasonReNfa.fold_transitions((function (param) {
          var partial_arg_000 = param[2];
          var partial_arg_001 = param[1];
          var partial_arg_002 = param[0];
          var partial_arg = /* tuple */[
            partial_arg_000,
            partial_arg_001,
            partial_arg_002
          ];
          return (function (param) {
              return add_transition$prime(partial_arg, param);
            });
        }), dfa, StateMapCharMapStateSet$ReasonReNfa.empty);
  return /* record */[
          /* start */dfa[/* finals */1],
          /* finals */Curry._1(StateSet$ReasonReNfa.singleton, dfa[/* start */0]),
          /* next */(function (s) {
              try {
                return Curry._2(StateMapCharMapStateSet$ReasonReNfa.find, s, map);
              }
              catch (exn){
                if (exn === Caml_builtin_exceptions.not_found) {
                  return CharMapStateSet$ReasonReNfa.empty;
                } else {
                  throw exn;
                }
              }
            })
        ];
}

function minimize(dfa) {
  return RabinScott$ReasonReNfa.determinize(reverse(RabinScott$ReasonReNfa.determinize(reverse(dfa))));
}

function inject(param) {
  var next = param[/* next */2];
  return /* record */[
          /* start */Curry._1(StateSet$ReasonReNfa.singleton, param[/* start */0]),
          /* finals */param[/* finals */1],
          /* next */(function (s) {
              return Curry._2(CharMapStateSet$ReasonReNfa.map, StateSet$ReasonReNfa.singleton, Curry._1(next, s));
            })
        ];
}

export {
  add_transition$prime ,
  reverse ,
  minimize ,
  inject ,
  
}
/* Dfa-ReasonReNfa Not a pure module */
