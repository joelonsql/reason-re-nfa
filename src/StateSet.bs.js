// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE

import * as $$Set from "../node_modules/bs-platform/lib/es6/set.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Int32 from "../node_modules/bs-platform/lib/es6/int32.js";
import * as $$String from "../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

var include = $$Set.Make([Int32.compare]);

var elements = include[19];

var of_list = include[25];

function to_string(state_set) {
  return "{" + ($$String.concat(" ", List.map(Int32.to_string, Curry._1(elements, state_set))) + "}");
}

function example(state_list) {
  return Curry._1(of_list, List.map((function (prim) {
                    return prim;
                  }), state_list));
}

function test(param) {
  if (to_string(example(/* [] */0)) !== "{}") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "StateSet.re",
            13,
            2
          ]
        ];
  }
  if (to_string(example(/* :: */[
              0,
              /* [] */0
            ])) !== "{0}") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "StateSet.re",
            14,
            2
          ]
        ];
  }
  if (to_string(example(/* :: */[
              1,
              /* :: */[
                0,
                /* :: */[
                  2,
                  /* [] */0
                ]
              ]
            ])) === "{0 1 2}") {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "StateSet.re",
            15,
            2
          ]
        ];
  }
}

var empty = include[0];

var is_empty = include[1];

var mem = include[2];

var add = include[3];

var singleton = include[4];

var remove = include[5];

var union = include[6];

var inter = include[7];

var diff = include[8];

var compare = include[9];

var equal = include[10];

var subset = include[11];

var iter = include[12];

var fold = include[13];

var for_all = include[14];

var exists = include[15];

var filter = include[16];

var partition = include[17];

var cardinal = include[18];

var min_elt = include[20];

var max_elt = include[21];

var choose = include[22];

var split = include[23];

var find = include[24];

export {
  empty ,
  is_empty ,
  mem ,
  add ,
  singleton ,
  remove ,
  union ,
  inter ,
  diff ,
  compare ,
  equal ,
  subset ,
  iter ,
  fold ,
  for_all ,
  exists ,
  filter ,
  partition ,
  cardinal ,
  elements ,
  min_elt ,
  max_elt ,
  choose ,
  split ,
  find ,
  of_list ,
  to_string ,
  example ,
  test ,
  
}
/* include Not a pure module */
