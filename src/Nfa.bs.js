// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Int32 from "../node_modules/bs-platform/lib/es6/int32.js";
import * as $$String from "../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_array from "../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Common$ReasonReNfa from "./Common.bs.js";
import * as CharSet$ReasonReNfa from "./CharSet.bs.js";
import * as StateMap$ReasonReNfa from "./StateMap.bs.js";
import * as StateSet$ReasonReNfa from "./StateSet.bs.js";
import * as CharSetMap$ReasonReNfa from "./CharSetMap.bs.js";
import * as CharSetSet$ReasonReNfa from "./CharSetSet.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

function singleton(start) {
  return /* record */[
          /* states */start,
          /* alphabet */CharSetSet$ReasonReNfa.empty,
          /* transitions */StateMap$ReasonReNfa.empty,
          /* start */start,
          /* finals */StateSet$ReasonReNfa.empty
        ];
}

function set_finals(finals, nfa) {
  return /* record */[
          /* states */nfa[/* states */0],
          /* alphabet */nfa[/* alphabet */1],
          /* transitions */nfa[/* transitions */2],
          /* start */nfa[/* start */3],
          /* finals */Curry._1(StateSet$ReasonReNfa.of_list, List.map((function (s) {
                      return Curry._2(StateSet$ReasonReNfa.find, s, nfa[/* states */0]);
                    }), Curry._1(StateSet$ReasonReNfa.elements, finals)))
        ];
}

function add_transition(param, nfa) {
  var dst = param[2];
  var char_set = param[1];
  var src = param[0];
  var tmp;
  var exit = 0;
  var char_set_map;
  try {
    char_set_map = Curry._2(StateMap$ReasonReNfa.find, src, nfa[/* transitions */2]);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      tmp = Curry._2(CharSetMap$ReasonReNfa.singleton, char_set, Curry._1(StateSet$ReasonReNfa.singleton, dst));
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    var tmp$1;
    var exit$1 = 0;
    var dsts;
    try {
      dsts = Curry._2(CharSetMap$ReasonReNfa.find, char_set, char_set_map);
      exit$1 = 2;
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        tmp$1 = Curry._1(StateSet$ReasonReNfa.singleton, dst);
      } else {
        throw exn$1;
      }
    }
    if (exit$1 === 2) {
      tmp$1 = Curry._2(StateSet$ReasonReNfa.add, dst, dsts);
    }
    tmp = Curry._3(CharSetMap$ReasonReNfa.add, char_set, tmp$1, char_set_map);
  }
  return /* record */[
          /* states */Curry._2(StateSet$ReasonReNfa.add, dst, Curry._2(StateSet$ReasonReNfa.add, src, nfa[/* states */0])),
          /* alphabet */Curry._2(CharSetSet$ReasonReNfa.add, char_set, nfa[/* alphabet */1]),
          /* transitions */Curry._3(StateMap$ReasonReNfa.add, src, tmp, nfa[/* transitions */2]),
          /* start */nfa[/* start */3],
          /* finals */nfa[/* finals */4]
        ];
}

function to_dot(nfa) {
  return "digraph {\nrankdir = LR;\nnode [shape = none; width = 0;] \"\";\n" + ($$String.concat("\n", List.map((function (state) {
                      var shape = Curry._2(StateSet$ReasonReNfa.mem, state, nfa[/* finals */4]) ? "doublecircle" : "circle";
                      return "node [shape = " + (shape + ("] " + (Int32.to_string(state) + ";")));
                    }), Curry._1(StateSet$ReasonReNfa.elements, nfa[/* states */0]))) + ("\n\"\" -> " + (StateSet$ReasonReNfa.to_string(nfa[/* start */3]) + (";\n" + ($$String.concat("\n", List.map((function (param) {
                              var src = param[0];
                              return $$String.concat("\n", List.map((function (param) {
                                                return Int32.to_string(src) + ("->" + (StateSet$ReasonReNfa.to_string(param[1]) + (" [label=\"" + (CharSet$ReasonReNfa.to_string(param[0]) + "\"];"))));
                                              }), Curry._1(CharSetMap$ReasonReNfa.bindings, param[1])));
                            }), Curry._1(StateMap$ReasonReNfa.bindings, nfa[/* transitions */2]))) + "\n}\n")))));
}

function to_matrix(nfa) {
  var states = $$Array.of_list(Curry._1(StateSet$ReasonReNfa.elements, nfa[/* states */0]));
  var dimx = states.length;
  var alphabet = $$Array.of_list(Curry._1(CharSetSet$ReasonReNfa.elements, nfa[/* alphabet */1]));
  var dimy = alphabet.length;
  var matrix = $$Array.make_matrix(dimx + 1 | 0, dimy + 1 | 0, "");
  for(var x = 1; x <= dimx; ++x){
    var src = Caml_array.caml_array_get(states, x - 1 | 0);
    Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, x), 0, Int32.to_string(src));
    for(var y = 1; y <= dimy; ++y){
      var char_set = Caml_array.caml_array_get(alphabet, y - 1 | 0);
      if (x === 1) {
        Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, 0), y, CharSet$ReasonReNfa.to_string(char_set));
      }
      var tmp;
      var exit = 0;
      var dsts;
      try {
        dsts = Curry._2(CharSetMap$ReasonReNfa.find, char_set, Curry._2(StateMap$ReasonReNfa.find, src, nfa[/* transitions */2]));
        exit = 1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          tmp = "";
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        tmp = StateSet$ReasonReNfa.to_string(dsts);
      }
      Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, x), y, tmp);
    }
  }
  return matrix;
}

function accept(nfa, input) {
  var _cur_states = nfa[/* start */3];
  var _param = Common$ReasonReNfa.explode(input);
  while(true) {
    var param = _param;
    var cur_states = _cur_states;
    if (param) {
      var cur_char = param[0];
      _param = param[1];
      _cur_states = Curry._3(StateSet$ReasonReNfa.fold, (function(cur_char){
          return function (src) {
            var tmp;
            var exit = 0;
            var char_set_map;
            try {
              char_set_map = Curry._2(StateMap$ReasonReNfa.find, src, nfa[/* transitions */2]);
              exit = 1;
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                tmp = StateSet$ReasonReNfa.empty;
              } else {
                throw exn;
              }
            }
            if (exit === 1) {
              tmp = Curry._3(CharSetMap$ReasonReNfa.fold, (function (param, state_set, dsts) {
                      return Curry._2(StateSet$ReasonReNfa.union, dsts, state_set);
                    }), Curry._2(CharSetMap$ReasonReNfa.filter, (function (char_set, param) {
                          return Curry._2(CharSet$ReasonReNfa.mem, cur_char, char_set);
                        }), char_set_map), StateSet$ReasonReNfa.empty);
            }
            return Curry._1(StateSet$ReasonReNfa.union, tmp);
          }
          }(cur_char)), cur_states, StateSet$ReasonReNfa.empty);
      continue ;
    } else {
      return !Curry._1(StateSet$ReasonReNfa.is_empty, Curry._2(StateSet$ReasonReNfa.inter, cur_states, nfa[/* finals */4]));
    }
  };
}

function dump(nfa) {
  console.log("Nfa.states: " + StateSet$ReasonReNfa.to_string(nfa[/* states */0]));
  console.log("Nfa.alphabet: " + CharSetSet$ReasonReNfa.to_string(nfa[/* alphabet */1]));
  console.log("Nfa.transitions:");
  console.log(to_matrix(nfa));
  console.log("Nfa.start: " + StateSet$ReasonReNfa.to_string(nfa[/* start */3]));
  console.log("Nfa.finals: " + StateSet$ReasonReNfa.to_string(nfa[/* finals */4]));
  return /* () */0;
}

function test(param) {
  var nfa = set_finals(StateSet$ReasonReNfa.example(/* :: */[
            1,
            /* :: */[
              3,
              /* :: */[
                4,
                /* [] */0
              ]
            ]
          ]), add_transition(/* tuple */[
            4,
            Curry._1(CharSet$ReasonReNfa.singleton, /* "c" */99),
            4
          ], add_transition(/* tuple */[
                3,
                Curry._1(CharSet$ReasonReNfa.singleton, /* "c" */99),
                4
              ], add_transition(/* tuple */[
                    2,
                    Curry._1(CharSet$ReasonReNfa.singleton, /* "b" */98),
                    3
                  ], add_transition(/* tuple */[
                        0,
                        Curry._1(CharSet$ReasonReNfa.singleton, /* "a" */97),
                        2
                      ], add_transition(/* tuple */[
                            0,
                            Curry._1(CharSet$ReasonReNfa.singleton, /* "a" */97),
                            1
                          ], singleton(Curry._1(StateSet$ReasonReNfa.singleton, Int32.zero))))))));
  console.log(to_dot(nfa));
  console.log(to_matrix(nfa));
  console.log(accept(nfa, "abc"));
  return /* () */0;
}

export {
  singleton ,
  set_finals ,
  add_transition ,
  to_dot ,
  to_matrix ,
  accept ,
  dump ,
  test ,
  
}
/* CharSet-ReasonReNfa Not a pure module */
