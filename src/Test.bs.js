// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as Sys from "../node_modules/bs-platform/lib/es6/sys.js";
import * as Pervasives from "../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Dfa$ReasonReNfa from "./Dfa.bs.js";
import * as Nfa$ReasonReNfa from "./Nfa.bs.js";
import * as Glushkov$ReasonReNfa from "./Glushkov.bs.js";
import * as Brzozowski$ReasonReNfa from "./Brzozowski.bs.js";
import * as RabinScott$ReasonReNfa from "./RabinScott.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as RegexParser$ReasonReNfa from "./RegexParser.bs.js";

function test(param) {
  console.log("testing...");
  var r = RegexParser$ReasonReNfa.parse("0000|0101|1010|1111");
  var glushkov = Glushkov$ReasonReNfa.compile(r);
  var nfa = glushkov[/* nfa */0];
  console.log(Nfa$ReasonReNfa.to_dot(nfa));
  Nfa$ReasonReNfa.dump(nfa);
  if (!Nfa$ReasonReNfa.accept(nfa, "0101")) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            8,
            2
          ]
        ];
  }
  if (Nfa$ReasonReNfa.accept(nfa, "1101")) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            9,
            2
          ]
        ];
  }
  Pervasives.print_newline(/* () */0);
  console.log("RabinScott.determinize(nfa)");
  var dfa = RabinScott$ReasonReNfa.determinize(nfa);
  console.log(Dfa$ReasonReNfa.to_dot(dfa));
  Dfa$ReasonReNfa.dump(dfa);
  if (!Dfa$ReasonReNfa.accept(dfa, "0101")) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            16,
            2
          ]
        ];
  }
  if (Dfa$ReasonReNfa.accept(dfa, "1101")) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Test.re",
            17,
            2
          ]
        ];
  }
  Pervasives.print_newline(/* () */0);
  console.log("Brzozowski.reverse(dfa)");
  var reversed = Brzozowski$ReasonReNfa.reverse(dfa);
  console.log(Nfa$ReasonReNfa.to_dot(reversed));
  Nfa$ReasonReNfa.dump(reversed);
  Pervasives.print_newline(/* () */0);
  console.log("RabinScott.determinize(reversed)");
  var dfa2 = RabinScott$ReasonReNfa.determinize(reversed);
  console.log(Dfa$ReasonReNfa.to_dot(dfa2));
  Dfa$ReasonReNfa.dump(dfa2);
  Pervasives.print_newline(/* () */0);
  console.log("Brzozowski.reverse(dfa2)");
  var reversed2 = Brzozowski$ReasonReNfa.reverse(dfa2);
  console.log(Nfa$ReasonReNfa.to_dot(reversed2));
  Nfa$ReasonReNfa.dump(reversed2);
  Pervasives.print_newline(/* () */0);
  console.log("RabinScott.determinize(reversed2)");
  var dfa_minimal = RabinScott$ReasonReNfa.determinize(reversed2);
  console.log(Dfa$ReasonReNfa.to_dot(dfa_minimal));
  Dfa$ReasonReNfa.dump(dfa_minimal);
  console.log("OK!");
  console.log(Sys.ocaml_version);
  return /* () */0;
}

test(/* () */0);

export {
  test ,
  
}
/*  Not a pure module */
