// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Int32 from "../node_modules/bs-platform/lib/es6/int32.js";
import * as Nfa$ReasonReNfa from "./Nfa.bs.js";
import * as StateSet$ReasonReNfa from "./StateSet.bs.js";
import * as LetterSet$ReasonReNfa from "./LetterSet.bs.js";
import * as Letter2Set$ReasonReNfa from "./Letter2Set.bs.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as RegexParser$ReasonReNfa from "./RegexParser.bs.js";
import * as AnnotatedRegex$ReasonReNfa from "./AnnotatedRegex.bs.js";

function l(_param) {
  while(true) {
    var param = _param;
    if (typeof param === "number") {
      if (param === 0) {
        return false;
      } else {
        return true;
      }
    } else {
      switch (param.tag | 0) {
        case 0 : 
            return false;
        case 1 : 
            if (l(param[0])) {
              return true;
            } else {
              _param = param[1];
              continue ;
            }
        case 2 : 
            if (l(param[0])) {
              _param = param[1];
              continue ;
            } else {
              return false;
            }
        case 3 : 
            return true;
        
      }
    }
  };
}

function p(_param) {
  while(true) {
    var param = _param;
    if (typeof param === "number") {
      return LetterSet$ReasonReNfa.empty;
    } else {
      switch (param.tag | 0) {
        case 0 : 
            return Curry._1(LetterSet$ReasonReNfa.singleton, param[0]);
        case 1 : 
            return Curry._2(LetterSet$ReasonReNfa.$less$plus$great, p(param[0]), p(param[1]));
        case 2 : 
            var e = param[0];
            return Curry._2(LetterSet$ReasonReNfa.$less$plus$great, p(e), l(e) ? p(param[1]) : LetterSet$ReasonReNfa.empty);
        case 3 : 
            _param = param[0];
            continue ;
        
      }
    }
  };
}

function d(_param) {
  while(true) {
    var param = _param;
    if (typeof param === "number") {
      return LetterSet$ReasonReNfa.empty;
    } else {
      switch (param.tag | 0) {
        case 0 : 
            return Curry._1(LetterSet$ReasonReNfa.singleton, param[0]);
        case 1 : 
            return Curry._2(LetterSet$ReasonReNfa.$less$plus$great, d(param[0]), d(param[1]));
        case 2 : 
            var e = param[1];
            return Curry._2(LetterSet$ReasonReNfa.$less$plus$great, l(e) ? d(param[0]) : LetterSet$ReasonReNfa.empty, d(e));
        case 3 : 
            _param = param[0];
            continue ;
        
      }
    }
  };
}

function f_(param) {
  if (typeof param === "number") {
    return Letter2Set$ReasonReNfa.empty;
  } else {
    switch (param.tag | 0) {
      case 1 : 
          return Curry._2(Letter2Set$ReasonReNfa.$less$plus$great, f_(param[0]), f_(param[1]));
      case 2 : 
          var f = param[1];
          var e = param[0];
          return Curry._2(Letter2Set$ReasonReNfa.$less$plus$great, Curry._2(Letter2Set$ReasonReNfa.$less$plus$great, f_(e), f_(f)), Letter2Set$ReasonReNfa.$less$star$great(d(e), p(f)));
      case 3 : 
          var e$1 = param[0];
          return Curry._2(Letter2Set$ReasonReNfa.$less$plus$great, f_(e$1), Letter2Set$ReasonReNfa.$less$star$great(d(e$1), p(e$1)));
      default:
        return Letter2Set$ReasonReNfa.empty;
    }
  }
}

function positions(letter_set) {
  return Curry._1(StateSet$ReasonReNfa.of_list, List.map((function (prim) {
                    return prim[1];
                  }), Curry._1(LetterSet$ReasonReNfa.elements, letter_set)));
}

function compile(r) {
  var annotated = AnnotatedRegex$ReasonReNfa.annotate(r);
  var nullable = l(annotated);
  var firsts = p(annotated);
  var lasts = d(annotated);
  var factors = f_(annotated);
  var nfa = Nfa$ReasonReNfa.set_finals(nullable ? Curry._2(StateSet$ReasonReNfa.add, Int32.zero, positions(lasts)) : positions(lasts), Curry._3(Letter2Set$ReasonReNfa.fold, (function (param, nfa) {
              var match = param[1];
              return Nfa$ReasonReNfa.add_transition(/* tuple */[
                          param[0][1],
                          match[0],
                          match[1]
                        ], nfa);
            }), factors, Curry._3(LetterSet$ReasonReNfa.fold, (function (param, nfa) {
                  return Nfa$ReasonReNfa.add_transition(/* tuple */[
                              Int32.zero,
                              param[0],
                              param[1]
                            ], nfa);
                }), firsts, Nfa$ReasonReNfa.singleton(Curry._1(StateSet$ReasonReNfa.singleton, Int32.zero)))));
  return /* record */[
          /* nfa */nfa,
          /* annotated */AnnotatedRegex$ReasonReNfa.to_string(annotated),
          /* nullable */nullable,
          /* firsts */LetterSet$ReasonReNfa.to_string(firsts),
          /* lasts */LetterSet$ReasonReNfa.to_string(lasts),
          /* factors */Letter2Set$ReasonReNfa.to_string(factors)
        ];
}

function test(param) {
  var r = RegexParser$ReasonReNfa.parse("a|(b|c)de");
  var glushkov = compile(r);
  console.log(Nfa$ReasonReNfa.to_matrix(glushkov[/* nfa */0]));
  if (Nfa$ReasonReNfa.accept(glushkov[/* nfa */0], "bde")) {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "Glushkov.re",
            135,
            2
          ]
        ];
  }
}

export {
  l ,
  p ,
  d ,
  f_ ,
  positions ,
  compile ,
  test ,
  
}
/* Nfa-ReasonReNfa Not a pure module */
