// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE

import * as $$Set from "../node_modules/bs-platform/lib/es6/set.js";
import * as Char from "../node_modules/bs-platform/lib/es6/char.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as $$String from "../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

var include = $$Set.Make([Char.compare]);

var cardinal = include[18];

var elements = include[19];

var choose = include[22];

var of_list = include[25];

function to_string(char_set) {
  var match = Curry._1(cardinal, char_set);
  if (match === 0 || match === 1) {
    if (match !== 0) {
      return $$String.make(1, Curry._1(choose, char_set));
    } else {
      return "\xce\xb5";
    }
  } else if (match !== 256) {
    return "[" + ($$String.concat("", List.map((function (param) {
                        return $$String.make(1, param);
                      }), Curry._1(elements, char_set))) + "]");
  } else {
    return ".";
  }
}

var example = Curry.__1(of_list);

function test(param) {
  if (to_string(Curry._1(of_list, /* [] */0)) !== "\xce\xb5") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "CharSet.re",
            17,
            2
          ]
        ];
  }
  if (to_string(Curry._1(of_list, /* :: */[
              /* "a" */97,
              /* [] */0
            ])) !== "a") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "CharSet.re",
            18,
            2
          ]
        ];
  }
  if (to_string(Curry._1(of_list, /* :: */[
              /* "b" */98,
              /* :: */[
                /* "a" */97,
                /* :: */[
                  /* "c" */99,
                  /* [] */0
                ]
              ]
            ])) === "[abc]") {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "CharSet.re",
            19,
            2
          ]
        ];
  }
}

var empty = include[0];

var is_empty = include[1];

var mem = include[2];

var add = include[3];

var singleton = include[4];

var remove = include[5];

var union = include[6];

var inter = include[7];

var diff = include[8];

var compare = include[9];

var equal = include[10];

var subset = include[11];

var iter = include[12];

var fold = include[13];

var for_all = include[14];

var exists = include[15];

var filter = include[16];

var partition = include[17];

var min_elt = include[20];

var max_elt = include[21];

var split = include[23];

var find = include[24];

export {
  empty ,
  is_empty ,
  mem ,
  add ,
  singleton ,
  remove ,
  union ,
  inter ,
  diff ,
  compare ,
  equal ,
  subset ,
  iter ,
  fold ,
  for_all ,
  exists ,
  filter ,
  partition ,
  cardinal ,
  elements ,
  min_elt ,
  max_elt ,
  choose ,
  split ,
  find ,
  of_list ,
  to_string ,
  example ,
  test ,
  
}
/* include Not a pure module */
