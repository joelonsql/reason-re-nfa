// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE

import * as $$Set from "../node_modules/bs-platform/lib/es6/set.js";
import * as Char from "../node_modules/bs-platform/lib/es6/char.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as $$String from "../node_modules/bs-platform/lib/es6/string.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

var S = $$Set.Make([Char.compare]);

function to_string(char_set) {
  var match = Curry._1(S[/* cardinal */18], char_set);
  if (match === 0 || match === 1) {
    if (match !== 0) {
      return $$String.make(1, Curry._1(S[/* choose */22], char_set));
    } else {
      return "\xce\xb5";
    }
  } else if (match !== 256) {
    return "{" + ($$String.concat(" ", List.map((function (param) {
                        return $$String.make(1, param);
                      }), Curry._1(S[/* elements */19], char_set))) + "}");
  } else {
    return ".";
  }
}

function example(char_list) {
  return Curry._1(S[/* of_list */25], char_list);
}

function test(param) {
  if (to_string(Curry._1(S[/* of_list */25], /* [] */0)) !== "\xce\xb5") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "CharSet.re",
            17,
            2
          ]
        ];
  }
  if (to_string(Curry._1(S[/* of_list */25], /* :: */[
              /* "a" */97,
              /* [] */0
            ])) !== "a") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "CharSet.re",
            18,
            2
          ]
        ];
  }
  if (to_string(Curry._1(S[/* of_list */25], /* :: */[
              /* "b" */98,
              /* :: */[
                /* "a" */97,
                /* :: */[
                  /* "c" */99,
                  /* [] */0
                ]
              ]
            ])) === "{a b c}") {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "CharSet.re",
            19,
            2
          ]
        ];
  }
}

export {
  S ,
  to_string ,
  example ,
  test ,
  
}
/* S Not a pure module */
