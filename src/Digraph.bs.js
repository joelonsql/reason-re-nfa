// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE

import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as Format from "../node_modules/bs-platform/lib/es6/format.js";
import * as Pervasives from "../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Js_primitive from "../node_modules/bs-platform/lib/es6/js_primitive.js";

function format_attrs(formatter, attrs) {
  if (attrs) {
    Format.fprintf(formatter, /* Format */[
          /* Char_literal */Block.__(12, [
              /* "[" */91,
              /* Formatting_lit */Block.__(17, [
                  /* Break */Block.__(0, [
                      "@ ",
                      1,
                      0
                    ]),
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* End_of_format */0,
                            ""
                          ]]),
                      /* End_of_format */0
                    ])
                ])
            ]),
          "[@ @["
        ]);
    List.iter((function (param) {
            return Curry._2(Format.fprintf(formatter, /* Format */[
                            /* Caml_string */Block.__(3, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* "=" */61,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Caml_string */Block.__(3, [
                                                /* No_padding */0,
                                                /* Char_literal */Block.__(12, [
                                                    /* ";" */59,
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "%S@ =@ %S;"
                          ]), param[0], param[1]);
          }), attrs);
    return Format.fprintf(formatter, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "]" */93,
                    /* Formatting_lit */Block.__(17, [
                        /* Close_box */0,
                        /* End_of_format */0
                      ])
                  ]),
                "]@]"
              ]);
  } else {
    return /* () */0;
  }
}

function make(id) {
  return /* tuple */[
          id,
          /* [] */0
        ];
}

function with_attrs(param, attrs$prime) {
  return /* tuple */[
          param[0],
          Pervasives.$at(param[1], attrs$prime)
        ];
}

function format(formatter, param) {
  return Curry._3(Format.fprintf(formatter, /* Format */[
                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@ ",
                              1,
                              0
                            ]),
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ])]),
                  "%a@ %S"
                ]), format_attrs, param[1], param[0]);
}

function id(param) {
  return param[0];
}

var Node = /* module */[
  /* make */make,
  /* with_attrs */with_attrs,
  /* format */format,
  /* id */id
];

function with_attrs$1(param, attrs) {
  return /* tuple */[
          param[0],
          Pervasives.$at(param[1], List.map((function (param) {
                      return /* Attr */Block.__(2, [
                                param[0],
                                param[1]
                              ]);
                    }), attrs))
        ];
}

function with_node(param, node) {
  return /* tuple */[
          param[0],
          Pervasives.$at(param[1], /* :: */[
                /* Node */Block.__(0, [node]),
                /* [] */0
              ])
        ];
}

function with_edge(param, attrs, param$1) {
  var n2 = param$1[1];
  var n1 = param$1[0];
  var stmts = param[1];
  var id = param[0];
  if (attrs !== undefined) {
    return /* tuple */[
            id,
            Pervasives.$at(stmts, /* :: */[
                  /* Edge */Block.__(1, [
                      n1,
                      n2,
                      attrs
                    ]),
                  /* [] */0
                ])
          ];
  } else {
    return /* tuple */[
            id,
            Pervasives.$at(stmts, /* :: */[
                  /* Edge */Block.__(1, [
                      n1,
                      n2,
                      /* [] */0
                    ]),
                  /* [] */0
                ])
          ];
  }
}

function with_name(param, n) {
  return /* tuple */[
          Js_primitive.some(n),
          param[1]
        ];
}

function format_stmt(formatter, param) {
  switch (param.tag | 0) {
    case 0 : 
        return Curry._2(Format.fprintf(formatter, /* Format */[
                        /* String_literal */Block.__(11, [
                            "node",
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@ ",
                                    1,
                                    0
                                  ]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* End_of_format */0,
                                          ""
                                        ]]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "node@ @[%a@]"
                      ]), format, param[0]);
    case 1 : 
        return Curry._4(Format.fprintf(formatter, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Formatting_gen */Block.__(18, [
                                /* Open_box */Block.__(1, [/* Format */[
                                      /* End_of_format */0,
                                      ""
                                    ]]),
                                /* Caml_string */Block.__(3, [
                                    /* No_padding */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Break */Block.__(0, [
                                            "@ ",
                                            1,
                                            0
                                          ]),
                                        /* String_literal */Block.__(11, [
                                            "->",
                                            /* Formatting_lit */Block.__(17, [
                                                /* Break */Block.__(0, [
                                                    "@ ",
                                                    1,
                                                    0
                                                  ]),
                                                /* Caml_string */Block.__(3, [
                                                    /* No_padding */0,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@ ",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[@[%S@ ->@ %S@]@ %a@]"
                      ]), id(param[0]), id(param[1]), format_attrs, param[2]);
    case 2 : 
        return Curry._2(Format.fprintf(formatter, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Caml_string */Block.__(3, [
                                /* No_padding */0,
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Char_literal */Block.__(12, [
                                        /* "=" */61,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* Caml_string */Block.__(3, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* Char_literal */Block.__(12, [
                                                        /* ";" */59,
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "@[%S@ =@ %S@];"
                      ]), param[0], param[1]);
    
  }
}

function format$1(formatter, param) {
  var id = param[0];
  if (id !== undefined) {
    Curry._1(Format.fprintf(formatter, /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Close_box */0,
                  /* String_literal */Block.__(11, [
                      "digraph ",
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* Char_literal */Block.__(12, [
                              /* "{" */123,
                              /* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* End_of_format */0,
                                        ""
                                      ]]),
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "@]digraph %S{@["
            ]), id);
  } else {
    Format.fprintf(formatter, /* Format */[
          /* Formatting_gen */Block.__(18, [
              /* Open_box */Block.__(1, [/* Format */[
                    /* End_of_format */0,
                    ""
                  ]]),
              /* String_literal */Block.__(11, [
                  "digraph {",
                  /* Formatting_lit */Block.__(17, [
                      /* Force_newline */3,
                      /* End_of_format */0
                    ])
                ])
            ]),
          "@[digraph {@\n"
        ]);
  }
  List.iter(Curry._1(Format.fprintf(formatter, /* Format */[
                /* Formatting_lit */Block.__(17, [
                    /* Break */Block.__(0, [
                        "@ ",
                        1,
                        0
                      ]),
                    /* Formatting_lit */Block.__(17, [
                        /* Break */Block.__(0, [
                            "@ ",
                            1,
                            0
                          ]),
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* End_of_format */0,
                                  ""
                                ]]),
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Close_box */0,
                                    /* Formatting_lit */Block.__(17, [
                                        /* Force_newline */3,
                                        /* End_of_format */0
                                      ])
                                  ])])
                          ])
                      ])
                  ]),
                "@ @ @[%a@]@\n"
              ]), format_stmt), param[1]);
  return Format.fprintf(formatter, /* Format */[
              /* Char_literal */Block.__(12, [
                  /* "}" */125,
                  /* Formatting_lit */Block.__(17, [
                      /* Close_box */0,
                      /* End_of_format */0
                    ])
                ]),
              "}@]"
            ]);
}

var empty = /* tuple */[
  undefined,
  /* [] */0
];

export {
  format_attrs ,
  Node ,
  empty ,
  with_attrs$1 as with_attrs,
  with_node ,
  with_edge ,
  with_name ,
  format_stmt ,
  format$1 as format,
  
}
/* Format Not a pure module */
